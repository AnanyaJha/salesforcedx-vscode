I",0<h2 id="apex-replay-debugger-の設定">Apex Replay Debugger の設定</h2>

<p>Apex Replay Debugger を初めて使用するときに、起動設定を作成します。それ以降は、問題をデバッグするたびに、Apex Replay Debugger セッションを設定します。</p>

<h3 id="起動定義の作成">起動定義の作成</h3>

<p>Apex Replay Debugger の起動設定を作成するには、プロジェクトの <code>.vscode/launch.json</code> ファイルを作成または更新します。</p>

<ol>
  <li>VS Code で Salesforce DX プロジェクトを開きます。</li>
  <li>Salesforce DX プロジェクトにまだ <code>.vscode/launch.json</code> ファイルパスを設定した JSON ファイルがない場合は、そのファイル (と必要に応じてフォルダ) を作成します。</li>
  <li><code>.vscode/launch.json</code> ファイルを開きます。</li>
  <li><code>Launch Apex Replay Debugger</code> という設定を追加します。</li>
</ol>

<pre><code class="language-json">{
  // Use IntelliSense to learn about possible attributes.
  // Hover to view descriptions of existing attributes.
  // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387
  "version": "0.2.0",
  "configurations": [
    {
      "name": "Launch Apex Replay Debugger",
      "type": "apex-replay",
      "request": "launch",
      "logFile": "${command:AskForLogFileName}",
      "stopOnEntry": true,
      "trace": true
    }
  ]
}
</code></pre>

<h3 id="ブレークポイントとチェックポイントの設定">ブレークポイントとチェックポイントの設定</h3>

<p>再生デバッグ用のデバッグログを生成する前に、ブレークポイントとチェックポイントを設定します。</p>

<ol>
  <li>行ブレークポイントを設定するには、<code>.cls</code> または <code>.trigger</code> ファイルを開き、行番号の左側にある列をクリックします。</li>
  <li>
    <p>行ブレーキポイントが提供する量よりも情報が多い場合は、チェックポイントを追加します。コード行の実行時にヒープダンプを取得するチェックポイントを最大 5 つ設定できます。ローカル変数、静的変数、トリガコンテキスト変数はすべて、チェックポイントに役立つ情報があります。トリガコンテキスト変数はログに存在せず、チェックポイント場所でのみ使用できます。<br />
Visual Studio Code で、チェックポイントはブレークポイントの一種です。ログからの再生デバッグ時に、チェックポイントはブレークポイントのように機能します。Apex Replay Debugger セッションを開始する前に、チェックポイントを設定してアップロードします。</p>

    <ol>
      <li>Apex クラスまたはトリガの最大 5 つの行にチェックポイントを設定します。</li>
      <li>チェックポイントを設定するコード行をクリックします。</li>
      <li>コマンドパレットを開きます (Windows、Linux は Ctrl+Shift+P キー、macOS は Cmd+Shift+P キーを押します)。</li>
      <li><strong>[SFDX: Toggle Checkpoint (SFDX: チェックポイントを切り替え)]</strong> を実行します。
        <ul>
          <li>
            <ul>
              <li>
                <ol>
                  <li>チェックポイントを組織にアップロードしてヒープダンプ情報を収集するには、コマンドパレットを開き、<strong>[SFDX: Update Checkpoints in Org (SFDX: 組織のチェックポイントを更新)]</strong> を実行します。</li>
                </ol>
              </li>
            </ul>
          </li>
        </ul>
      </li>
    </ol>
  </li>
</ol>

<h3 id="スクラッチ組織またはデフォルトの開発組織の-apex-replay-debugger-セッションの設定">スクラッチ組織またはデフォルトの開発組織の Apex Replay Debugger セッションの設定</h3>

<p>スクラッチ組織、または Sandbox あるいは VS Code でデフォルト組織として設定した DE 組織で問題をデバッグする場合は、再生するデバッグログを生成するツールが用意されています。ログを有効にして問題を再現し、組織からデバッグログを取得したうえで、デバッグセッションを開始します。</p>

<ol>
  <li>ログを有効にするには、VS Code から、コマンドパレットを開き (Windows、Linux は Ctrl+Shift+P キー、macOS は Cmd+Shift+P キー)、<strong>[SFDX: Turn On Apex Debug Log for Replay Debugger (SFDX: Replay Debugger の Apex デバッグログをオン)]</strong> を実行します。</li>
  <li>デバッグするシナリオを再現します。次の手順を実行します。
    <ul>
      <li><strong>[SFDX: Invoke Apex Tests (SFDX: Apex テストを呼び出し)]</strong> を実行します。</li>
      <li><strong>[SFDX: Execute Anonymous Apex with Currently Selected Text (SFDX: 現在選択されているテキストを使用して匿名 Apex を実行)]</strong> を実行します。</li>
      <li><strong>[SFDX: Execute Anonymous Apex with Editor Contents (SFDX: エディタのコンテンツを使用して匿名 Apex を実行)]</strong> を実行します。</li>
      <li>Web ブラウザの組織で手動の手順を実行します。</li>
    </ul>
  </li>
  <li>組織のデバッグログのリストを取得するには、<strong>[SFDX: Get Apex Debug Logs (SFDX: Apex デバッグログを取得)]</strong> を実行します。</li>
  <li>再生するログをクリックします。VS Code にログがダウンロードされて開きます。</li>
  <li><strong>[SFDX: Launch Apex Replay Debugger with Current File (SFDX: 現在のファイルを使用して Apex Replay Debugger を起動)]</strong> を実行します。</li>
</ol>

<h3 id="sandbox-または本番組織の-apex-replay-debugger-セッションの設定">Sandbox または本番組織の Apex Replay Debugger セッションの設定</h3>

<p>VS Code でスクラッチ組織または開発用のデフォルト組織として設定した組織を使用していない場合は、デバッグを開始する前に組織からデバッグログをダウンロードします。VS Code でログを開き、デバッグセッションを開始します。</p>

<ol>
  <li>VS Code で、分析するデバッグログを開きます。<code>VISUALFORCE</code> の場合はログレベルを <code>FINER</code> または <code>FINEST</code>、<code>APEX_CODE</code> の場合はログレベルを <code>FINEST</code> に設定したログを生成します。</li>
  <li><strong>[SFDX: Launch Apex Replay Debugger with Current File (SFDX: 現在のファイルを使用して Apex Replay Debugger を起動)]</strong> を実行します。</li>
</ol>

<p>ヒント: ログファイルが Salesforce DX プロジェクトの一部である場合は、ログファイルを開いて、別のコマンドを実行する必要はありません。代わりに、[Explorer (エクスプローラ)] ビューでログファイルを見つけて右クリックし、<strong>[Launch Apex Replay Debugger with Current File (現在のファイルを使用して Apex Replay Debugger を起動)]</strong> を選択します。</p>

<h2 id="コードのデバッグ">コードのデバッグ</h2>

<p>デバッグログを再生して、変数の値を調べます。</p>

<ol>
  <li>VS Code の [Debug (デバッグ)] ビューに切り替えるには、ウィンドウの左端にあるバグアイコンをクリックします。</li>
  <li>1 つ目のブレークポイントに達するまで、デバッグログに記録されたコード実行を再生するには、エディタの上部にある [Debug (デバッグ)] アクションペインの緑色の再生アイコンをクリックします。</li>
  <li>コードをステップ実行し、[Debug (デバッグ)] ビューの [VARIABLES (変数)] セクションで変数の状態を検証します。詳細は、『Visual Studio Code Docs』の<a href="https://code.visualstudio.com/docs/editor/debugging">「Debugging (デバッグ)」</a>を参照してください。<br />
デバッグセッション中にコードをステップ実行していくと、Apex Replay Debugger に、チェックポイントを設定した行のヒープダンプから変数に関する詳細が示されます。</li>
  <li>ログに記録されたイベントをすべてステップ実行したら、デバッグセッションが終了します。もう一度ログの先頭から開始する場合は、<strong>[SFDX: Launch Apex Replay Debugger with Last Log File (SFDX: 最新のログファイルを使用して Apex Replay Debugger を起動)]</strong> を実行します。</li>
</ol>

<h2 id="考慮事項">考慮事項</h2>

<p>Apex Replay Debugger を使用するときは、次の考慮事項と既知の問題に留意します。</p>

<ul>
  <li>このデバッガは各自の組織でのみ使用できます。ISV カスタマーデバッグは Apex Replay Debugger で使用できません。顧客の組織をデバッグする場合は、<a href="interactive-debugger#isv-customer-debugger">ISV カスタマーデバッガ</a>を使用します。</li>
  <li>デバッグログは一度に 1 つのみ再生できます。この制限により、複数のデバッグログを生成する非同期 Apex のデバッグが困難になることがあります。</li>
  <li>チェックポイントは 30 分で期限が切れるため、チェックポイントをアップロードしたらすぐセッションを開始してください。</li>
  <li>ヒープダンプは生成の約 1 日後に期限が切れるため、セッションを開始したらすぐコードをデバッグしてください。</li>
  <li>スケジュール済み Apex で生成されたデバッグログは再生できません。</li>
  <li>文字列変数の長い値は、ブレークポイントで切り捨てられます。チェックポイントでは、heap-dump-augmented 変数に完全な文字列があります。</li>
  <li>ブレークポイントで標準オブジェクトまたはカスタムオブジェクトを表示した場合、そのオブジェクトの直下の子変数 (1 つ下のレベル) までドリルダウンできます。チェックポイントでは、heap-dump-augmented 変数が、直下の子だけでなく、子標準オブジェクト全体をドリルダウンできます。</li>
  <li>コレクション (リスト、セット、対応付け) はそのメンバーが文字列形式で表示されるため、展開できません。</li>
  <li>コレクションを変更しても、[Debug (デバッグ)] ビューの [VARIABLES (変数)] セクションのコレクション変数は更新されません。</li>
  <li>メソッドブレークポイントまたは条件付きブレークポイントを設定することはできません。</li>
  <li>[Debug (デバッグ)] ビューの [WATCH (ウォッチ)] セクションの変数や式を評価または監視することはできません。</li>
  <li>デバッグ中に、[Debug (デバッグ)] ビューの [VARIABLES (変数)] セクションの変数を右クリックし、<strong>[Copy Value (値のコピー)]</strong> を選択しても適切に機能します。ただし、<strong>[Copy as Expression (式としてコピー)]</strong> と <strong>[Add to Watch (ウォッチに追加)]</strong> は適切に機能しません。
    <ul>
      <li><strong>[Copy as Expression (式としてコピー)]</strong> は [Copy Value (値をコピー)] のように機能します。つまり、完全な変数名をコピーするのではなく、変数の値をコピーします。</li>
      <li><strong>[Add to Watch (ウォッチに追加)]</strong> は変数の値を [WATCH (ウォッチ)] セクションにコピーしますが、このセクションの変数は評価されないため、<code>&lt;VariableValue&gt;:&lt;VariableValue&gt;</code> のみが表示されます。</li>
    </ul>
  </li>
</ul>
:ET